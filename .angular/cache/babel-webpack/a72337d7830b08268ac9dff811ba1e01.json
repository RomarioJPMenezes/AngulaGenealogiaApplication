{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nexport class CasamentoFiltro {\n  constructor() {\n    this.nomeNoivo = '';\n    this.nomeNoiva = '';\n    this.paisNoivo = '';\n    this.paisNoiva = '';\n    this.testemunhas = '';\n    this.localizacao = 0;\n    this.pagina = 0;\n    this.itensPorPagina = 10;\n  }\n\n}\nexport let CasamentoService = /*#__PURE__*/(() => {\n  class CasamentoService {\n    constructor(http, datePipe) {\n      this.http = http;\n      this.datePipe = datePipe;\n      this.casamentoUrl = environment.apiUrl + '/casamentos';\n    }\n\n    pesquisar(filtro) {\n      let params = new HttpParams();\n      params = params.set('page', filtro.pagina);\n      params = params.set('size', filtro.itensPorPagina);\n\n      if (filtro.localizacao) {\n        params = params.set('localizacao', filtro.localizacao);\n      }\n\n      if (filtro.nomeNoivo) {\n        params = params.set('nomeNoivo', filtro.nomeNoivo);\n      }\n\n      if (filtro.nomeNoiva) {\n        params = params.set('nomeNoiva', filtro.nomeNoiva);\n      }\n\n      if (filtro.paisNoivo) {\n        params = params.set('paisNoivo', filtro.paisNoivo);\n      }\n\n      if (filtro.paisNoiva) {\n        params = params.set('paisNoiva', filtro.paisNoiva);\n      }\n\n      if (filtro.testemunhas) {\n        params = params.set('testemunhas', filtro.testemunhas);\n      }\n\n      if (filtro.dataCasamentoDe) {\n        params = params.set('dataCasamentoDe', this.datePipe.transform(filtro.dataCasamentoDe, 'yyyy-MM-dd'));\n      }\n\n      if (filtro.dataCasamentoAte) {\n        params = params.set('dataCasamentoAte', this.datePipe.transform(filtro.dataCasamentoAte, 'yyyy-MM-dd'));\n      }\n\n      const headers = new HttpHeaders().append('Authorization', 'Basic YWRtaW5AYWxnYW1vbmV5LmNvbTphZG1pbg==');\n      return this.http.get(`${this.casamentoUrl}`, {\n        headers,\n        params\n      }).toPromise().then(response => {\n        const casamentos = response['content'];\n        const resultado = {\n          casamentos: casamentos,\n          total: response['totalElements']\n        };\n        return resultado;\n      });\n    }\n\n    excluir(codigo) {\n      const headers = new HttpHeaders().append('Authorization', 'Basic YWRtaW5AYWxnYW1vbmV5LmNvbTphZG1pbg==');\n      return this.http.delete(`${this.casamentoUrl}/${codigo}`, {\n        headers\n      }).toPromise().then(() => null);\n    }\n\n    adicionar(casamento) {\n      const headers = new HttpHeaders().append('Authorization', 'Basic YWRtaW5AYWxnYW1vbmV5LmNvbTphZG1pbg==').append('Content-Type', 'application/json');\n      return this.http.post(this.casamentoUrl, casamento, {\n        headers\n      }).toPromise();\n    }\n\n    atualizar(casamento) {\n      return this.http.put(`${this.casamentoUrl}/${casamento.codigo}`, casamento).toPromise().then(response => {\n        return response['content'];\n      });\n    }\n\n    buscarPorCodigo(codigo) {\n      const headers = new HttpHeaders().append('Authorization', 'Basic YWRtaW5AYWxnYW1vbmV5LmNvbTphZG1pbg==');\n      return this.http.get(`${this.casamentoUrl}/${codigo}`, {\n        headers\n      }).toPromise().then(response => {\n        this.converterStringsParaData([response]);\n        return response;\n      });\n    }\n\n    converterStringsParaData(casamentos) {\n      for (const casamento of casamentos) {\n        //Evita bug na hora da edição, adiciona o timezone do usuário\n        let offset = new Date().getTimezoneOffset() * 60000;\n        casamento.dataCasamento = new Date(new Date(casamento.dataCasamento).getTime() + offset);\n\n        if (casamento.dataCasamento) {\n          casamento.dataCasamento = new Date(new Date(casamento.dataCasamento).getTime() + offset);\n        }\n      }\n    }\n\n  }\n\n  CasamentoService.ɵfac = function CasamentoService_Factory(t) {\n    return new (t || CasamentoService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DatePipe));\n  };\n\n  CasamentoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CasamentoService,\n    factory: CasamentoService.ɵfac,\n    providedIn: 'root'\n  });\n  return CasamentoService;\n})();","map":null,"metadata":{},"sourceType":"module"}