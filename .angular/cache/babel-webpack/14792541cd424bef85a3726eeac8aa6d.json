{"ast":null,"code":"import { from } from 'rxjs';\nimport { mergeMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class NotAuthenticatedError {}\nexport let AppHttpInterceptor = /*#__PURE__*/(() => {\n  class AppHttpInterceptor {\n    constructor(auth) {\n      this.auth = auth;\n    }\n\n    intercept(req, next) {\n      if (!req.url.includes('/oauth/token') && this.auth.isAccessTokenInvalido()) {\n        return from(this.auth.obterNovoAccessToken()).pipe(mergeMap(() => {\n          if (this.auth.isAccessTokenInvalido()) {\n            throw new NotAuthenticatedError();\n          }\n\n          req = req.clone({\n            setHeaders: {\n              Authorization: `Bearer ${localStorage.getItem('token')}`\n            }\n          });\n          return next.handle(req);\n        }));\n      }\n\n      return next.handle(req);\n    }\n\n  }\n\n  AppHttpInterceptor.ɵfac = function AppHttpInterceptor_Factory(t) {\n    return new (t || AppHttpInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  AppHttpInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AppHttpInterceptor,\n    factory: AppHttpInterceptor.ɵfac\n  });\n  return AppHttpInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}